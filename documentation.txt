initialization to make .csprojc/json file that keeps tracks of dependencies and confg settings - dotnet webapi -n 'api name'
add packages
- EF Core makes database operations easier
- Core.Design creates tables i think
- Npgsql 

add extensions
- REST Client for testing api endpoints within VScode

setup database
-ConnectionStrings
-DatabaseContext brdige between sql and c#
-connect DBcontext to program.cs 

create models
-use dataannotations helps in api validation during runtime

create controllers for entities that handle api request/responses

create and apply migrations

run the backend

use fluentapi onModelCreating to set complex constraints seeding relationships

basic program.cs structure
1️⃣ Create builder	Prepares a toolbox for configuring the app.
2️⃣ Add services (DI)	Registers features like controllers & database for dependency injection.
3️⃣ Build the app	Finalizes everything and creates the app object.
4️⃣ Add middleware	Defines steps that run before requests reach controllers (like security checks).
5️⃣ Map controllers	Tells the app where to route API requests.
6️⃣ Run the app	Starts the server, making it ready to handle requests.

JWT AUTHENTICATION enhanced with IConfiguration
    Install the necessary NuGet packages (JwtBearer and Microsoft.IdentityModel.Tokens).
    Create a JwtHelper class to generate the token.
    Configure JWT authentication in Program.cs.
    Create a login API to authenticate users and return a token.
    Secure API endpoints using the [Authorize] attribute.


Managing users
done by usermanager of identity core not the dbcontext dbcontext
